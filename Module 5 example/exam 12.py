"""
Напишите декоратор, который будет сохранять результаты выполнения декорируемой функции в словаре.
Словарь должен находиться в nonlocal области в следующем формате: по ключу располагается аргумент функции,
по значению — результат работы функции, например, {n: f(n)}.

И при повторном вызове функция будет брать значение из словаря, а не вычислять заново.
То есть словарь можно считать промежуточной памятью на время работы программы,
где будут храниться ранее вычисленные значения.
Исходная функция, которую нужно задекорировать, имеет следующий вид и выполняет простое умножение на число 123456789.:

"""

def cache(func):
   cache_dict = {}
   def wrapper(num):
       nonlocal cache_dict
       if num not in cache_dict:
           cache_dict[num] = func(num)
           print(f"Добавление результата в кеш: {cache_dict[num]}")
       else:
           print(f"Возвращение результата из кеша: {cache_dict[num]}")
       print(f"кеш {cache_dict}")
       return cache_dict[num]
   return wrapper


@cache
def f(n):
   return n * 123456789

for n in range(10):
    f(n)

f(1)

